<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用 aspnet_regiis.exe 加解密 web.config 內容]]></title>
    <url>%2F2018%2F02%2F01%2F%E4%BD%BF%E7%94%A8%20aspnet_regiis.exe%20%E5%8A%A0%E8%A7%A3%E5%AF%86%20web.config%20%E5%85%A7%E5%AE%B9%2F</url>
    <content type="text"><![CDATA[aspnet_regiis.exe 主要用途是用來註冊 IIS 上的 ASP.NET 應用程式，像是： 註冊 -i 移除 -u .NET Framework ASP.NET 安裝 建立 ASP.NET 應用程式集區 列出目前已安裝的 ASP.NET 版本 -lv 除了這些以外，還能將組態設定檔 web.config 指定區段加解密。 前言在 .NET 開發過程中，像是 Web Site、WebAPI 在建立專案時，即會一併產生 web.config 檔案，而 WinForm、Class Library … 等其他專案也會有 app.config 這種 XML 檔案類型的組態設定檔，提供程式開發人員可進一步設定網站伺服器、應用程式或個別網頁。組態設定檔內容難免也會包含了敏感機密資料，較常被提及的像是與資料庫連線所需要設定的連線字串 &lt;connectionStrings&gt; 即是，由於連線字串包含了伺服器名稱、使用者名稱、密碼等資訊，若不經加密處理而直接以明文方式儲存於組態設定檔，等於將該伺服器的存取權限直接暴露在外，若使用 Fortify SCA 針對程式碼進行弱點掃描偵測，也會被列出 High 高風險項目如下： Password Management: Hardcoded Password Password Management: Password in Configuration File Insecure Transport: Database &lt;!--以明文方式儲存連線字串--&gt; &lt;configuration&gt; &lt;connectionStrings&gt; &lt;add name=&quot;connStr&quot; connectionString=&quot;Data Source=.\SQLEXPRESS;Integrated Security=SSPI;Initial Catalog=Northwind;&quot; /&gt; &lt;/connectionStrings&gt; &lt;/configuration&gt; 使用 aspnet_regiis.exe 可以針對組態設定選擇使用 DPAPI (Windows Data Protection API) 或 RSA 進行加密，在 System.Configuration 裡也有提供相對的類別讓我們實作： DPAPI：DpapiProtectedConfigurationProvider RSA：RsaProtectedConfigurationProvider &lt;!--以 RSA 加密後的連線字串--&gt; &lt;connectionStrings configProtectionProvider=&quot;RsaProtectedConfigurationProvider&quot;&gt; &lt;EncryptedData Type=&quot;http://www.w3.org/2001/04/xmlenc#Element&quot; xmlns=&quot;http://www.w3.org/2001/04/xmlenc#&quot;&gt; &lt;EncryptionMethod Algorithm=&quot;http://www.w3.org/2001/04/xmlenc#tripledes-cbc&quot; /&gt; &lt;KeyInfo xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt; &lt;EncryptedKey xmlns=&quot;http://www.w3.org/2001/04/xmlenc#&quot;&gt; &lt;EncryptionMethod Algorithm=&quot;http://www.w3.org/2001/04/xmlenc#rsa-1_5&quot; /&gt; &lt;KeyInfo xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt; &lt;KeyName&gt;Rsa Key&lt;/KeyName&gt; &lt;/KeyInfo&gt; &lt;CipherData&gt; &lt;CipherValue&gt;Z8g+qVoFeQ2k6np0w0xuyPXgJ3MKYXgnP1ehkIwE8qCXv/5vkynw8WncDSfJFG8tQFWTDv5jUGK6zmjgQssrXI9vFrzlikqn2qZtML6DCkIkOrAFpmrn+eMHsow8tKhT6MugxD8CDQCjRKmNItvEOs+aE52Iy8xpke44D7r2vfVu5utGNuaJz9N5Qhwvj1qdhGxbH4yv8Y+oS3seRydUVu7UxTg8MmauQvJkfeUjEvAUKLhuqs69g03axt7wluglie2E3jEISBKaP1xsldD5etWVleOSgGMGFwSy6GNvAIDbiowO37Nj1x88B2YL/Vg69sRgrqvCw3GauXcQawPHVA==&lt;/CipherValue&gt; &lt;/CipherData&gt; &lt;/EncryptedKey&gt; &lt;/KeyInfo&gt; &lt;CipherData&gt; &lt;CipherValue&gt;QQJja/4XQZ9STW6EdH3YYbUyZoZMq2Y7Wtvm9obju/Hw1vSOf+k2/f+TvebZQxgRid2/95MTMY4ED/s7DzDjNDLvWV7TdtI298Yg6vxiFs1yx+Ln4O71vCfJA0I1wxHVP55d+3EHjWKfclrfCwR1+MLigvv2N5hdaAFMQabmrJKYW1zA+WtXJGmb6uaO4l0w5haDka0FH75b7oY4JOs1E+8tV9rvaOJPBuS4WyPizhKkCuT4cm6M7ywrzDL3sVwebFo68sxtUzmQdjfREQIIrL+IGG58eG6S5aJv5dlYJpahHdLFA8OA80U/mXi5P7TZ6ZBDZ4C4tseGOw6h3MBblKZ7PfvW7OnFvWYleMWIK2CqHwK7lHHhnS+A2TCPdsiKBt0Ad0qR0lIaHGKFC/+xeRaSAWCSekEPstg4ouhImKERbUWAHeCiaIp9kejJ/Zq9zW800lCIXoTiraU9PTpA7KmEvowEYNICRTXwJ43a6GajcGjNZwgfjyCByeJGba2SS+4oawaZ6wgSPL1+21gtYP4nlfuxej4Y2K3BnsOhvs+psk9NgUGNGMcrBOj8LoTq20ar8dRjWh9qQPvdl6fmQFUmQRswpzHQ&lt;/CipherValue&gt; &lt;/CipherData&gt; &lt;/EncryptedData&gt; &lt;/connectionStrings&gt; 環境說明程式路徑aspnet_regiis.exe 位於 .NET Framework 安裝目錄中，預設路徑是： 32位元：%windir%\Microsoft.NET\Framework 64位元：%windir%\Microsoft.NET\Framework64 若覺得每次開啟 cmd.exe 再切換到上述目錄而感到不便，也可以直接使用 Visual Studio 的 Developer Command Prompt，開啟後即會將 .NET Framework 所在目錄加到 path 裡；若要以電腦層級 (Machine-level) 加密，也請記得使用 系統管理員 身份執行，以免無法順利成功加密 web.config 組態設定檔，此部份會在後述說明。 使用限制一般來說，我們在 web.config 組態設定裡比較常使用到的區段像是： &lt;appSettings&gt; 自訂參數的 key/value &lt;connectionStrings&gt; 連線字串 &lt;identity&gt; 模擬 IIS 提供 Windows 驗證 &lt;sessionState&gt; Session 儲存機制設定 上述區段都可以透過 aspnet_regiis.exe 將內容加密，而下列則是無法進行加密的區段： &lt;processModel&gt; &lt;runtime&gt; &lt;mscorlib&gt; &lt;startup&gt; &lt;system.runtime.remoting&gt; &lt;configProtectedData&gt; &lt;satelliteassemblies&gt; &lt;cryptographySettings&gt; &lt;cryptoNameMapping&gt; &lt;cryptoClasses&gt; 可以簡單理解為：程式執行階段相關必要設定與加密過後的區段無法再進行加密；此外，使用 aspnet_regiis.exe 進行加密時，可以指定組態設定檔所在目錄或是 ASP.NET 應用程式集區名稱，但只會固定針對 web.config 這個檔案名稱做處理，且不會遞迴往下找尋所有子目錄，若發現 web.config 不存在，則會自動建立一個如下所示的檔案。 &lt;!--以加密 connectionStrings 為例，當 web.config 檔案不存在，則會自動建立--&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;configuration&gt; &lt;connectionStrings /&gt; &lt;/configuration&gt; aspnet_regiis.exe 提供了 RSA 與 DPAPI (Windows Data Protection API) 兩種加密方式，若執行時沒有特別指定加密提供者 (ProtectedConfigurationProvider)，預設則會使用 RSA-1024 來做加密；且僅有 RSA 加密方式才能匯出加密金鑰，若想在多台伺服器使用同一組加密金鑰，也僅能選擇此方式，接下來的說明也將以 RSA 加密為例。 加密層級RSAProtectedConfigurationProvider 提供了兩種金鑰容器 (Key Container)，我們可視實務上應用程式架構與資料敏感程度 (例：不同應用程式之間是否可共用同一組金鑰) 來決定採用何者： 電腦層級 (Machine-level)預設所有可登入電腦的使用者都可以存取電腦層級的 RSA 金鑰容器，但我們也可透過引數 -pa 來指定 NTFS 存取控制清單 (ACL)，若希望在同一台伺服器上的所有應用程式集區都共用同一組加密金鑰，則適合選擇此方式，而所有電腦層級的 RSA 金鑰都會儲存在： \Documents and Settings\All Users\Application Data\Microsoft\Crypto\RSA\MachineKeys 使用者層級 (User-level)使用者層級的 RSA 金鑰容器和使用者設定檔 (User Profile) 是一起儲存的，若僅想在特定的使用者帳戶下執行加密與解密，則適合選擇此方式，而當使用者設定檔被刪除時，RSA 金鑰也會一併被移除，因為金鑰的存放路徑位於使用者帳戶之下： \Documents and Settings\{使用者名稱}\Application Data\Microsoft\Crypto\RSA 實作說明指定組態設定檔目錄指定 web.config 組態設定檔所在目錄，採用 RSA 電腦層級加密其指定區段內容，可以透過引數 -pef 加密 -pdf 解密： #對象：D:\MyWeb\api\web.config 裡的 &lt;connectionStrings&gt; 區段 #加密 aspnet_regiis -pef &quot;connectionStrings&quot; &quot;D:\MyWeb\api&quot; #解密 aspnet_regiis -pdf &quot;connectionStrings&quot; &quot;D:\MyWeb\api&quot; 若欲加密的區段屬於巢狀區段 (例：下列的 &lt;globalization&gt; )，區段名稱則需要以 / 串接表示如： system.web/globalization。 &lt;configuration&gt; &lt;connectionStrings&gt; &lt;add name=&quot;connStr&quot; connectionString=&quot;Data Source=.\SQLEXPRESS;Integrated Security=SSPI;Initial Catalog=Northwind;&quot;/&gt; &lt;/connectionStrings&gt; &lt;system.web&gt; &lt;compilation debug=&quot;true&quot; targetFramework=&quot;4.6.2&quot; /&gt; &lt;httpRuntime targetFramework=&quot;4.6.2&quot; /&gt; &lt;customErrors mode=&quot;Off&quot; /&gt; &lt;globalization requestEncoding=&quot;UTF-8&quot; responseEncoding=&quot;UTF-8&quot; fileEncoding=&quot;BIG5&quot; culture=&quot;zh-TW&quot; uiCulture=&quot;zh-TW&quot; /&gt; &lt;/system.web&gt; &lt;/configuration&gt; 指定應用程式集區除了直接指定 web.config 組態設定檔所在目錄來加密，我們也可以使用 -pe 加密 -pd 解密，並以 -app 指定 IIS 中的應用程式虛擬路徑，或視需求加上 -site 指定站台名稱 (Name) 或編號 (ID)。以下圖而言， MyWeb 和 MyWeb2 裡都有 api 應用程式，不使用 -site 的情況下，則會對預設站台 (ID=1) 執行動作，例：建立了 MyWeb、MyWeb2 兩個站台，其中有各有 api 應用程式設定如下： #對象：D:\MyWeb\api\web.config 裡的 &lt;connectionStrings&gt; 區段 #加密 aspnet_regiis -pe &quot;connectionStrings&quot; -app &quot;/api&quot; #解密 aspnet_regiis -pd &quot;connectionStrings&quot; -app &quot;/api&quot; #對象：D:\MyWeb2\api\web.config 裡的 &lt;connectionStrings&gt; 區段 #加密 aspnet_regiis -pe &quot;connectionStrings&quot; -app &quot;/api&quot; -site &quot;MyWeb2&quot; #名稱 aspnet_regiis -pe &quot;connectionStrings&quot; -app &quot;/api&quot; -site &quot;2&quot; #編號 #解密 aspnet_regiis -pd &quot;connectionStrings&quot; -app &quot;/api&quot; -site &quot;MyWeb2&quot; #名稱 aspnet_regiis -pd &quot;connectionStrings&quot; -app &quot;/api&quot; -site &quot;2&quot; #編號 指定加密提供者使用 aspnet_regiis.exe 將組態設定檔進行加密時，預設是採用電腦層級的 RSAProtectedConfigurationProvider，若欲指定加密提供者，則需將下列 &lt;configProtectedData&gt; 區段加入 web.config ，設定說明如下： name： 加密提供者名稱 keyContainerName： 金鑰容器名稱 useMachineContainer： true 電腦層級(Machine-level) false 使用者層級(User-level) &lt;configProtectedData&gt; &lt;providers&gt; &lt;add name=&quot;UserLevelProvider&quot; type=&quot;System.Configuration.RsaProtectedConfigurationProvider, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL&quot; keyContainerName=&quot;MyKey&quot; useMachineContainer=&quot;false&quot; /&gt; &lt;/providers&gt; &lt;/configProtectedData&gt; 指定使用者層級加密如上述說明，若要指定目前使用者身份來做加密，則需設定 useMachineContainer=&quot;false&quot;，並在執行指令時透過 -prov 來指定加密提供者，而解密時則不需要再指定加密提供者。 #對象：D:\MyWeb\api\web.config 裡的 &lt;connectionStrings&gt; 區段 #加密 aspnet_regiis -pe &quot;connectionStrings&quot; -app &quot;/api&quot; -prov &quot;UserLevelProvider&quot; #解密 aspnet_regiis -pd &quot;connectionStrings&quot; -app &quot;/api&quot; 建立/刪除金鑰容器假設目前有個正在開發中系統，分別在不同的伺服器上建立了 INT、UAT、PROD 環境，而我們僅想要使用同一組金鑰來做加解密，以便簡化後續維運流程，這時候就得使用 -pc 建立金鑰容器與 -exp 將金鑰標示為可匯出；因為即使在不同電腦上指定了相同的 keyContainerName，加密後的金鑰仍是無法共用的。 ##建立 MyKey 金鑰容器，並標示為可匯出 aspnet_regiis -pc &quot;MyKey&quot; -exp ##刪除 MyKey 金鑰容器 aspnet_regiis -pz &quot;MyKey&quot; 匯出/匯入金鑰容器使用 -px 可將指定的金鑰容器匯出，通常我們會再加上 -pri 表示匯出時要包含私有金鑰，以便能夠進行加密與解密，若缺少了私有金鑰，僅能將資料加密無法解密，而匯出金鑰容器則是使用 -pi 引數。 #匯出 MyKey 金鑰容器 aspnet_regiis -px &quot;MyKey&quot; &quot;C:\MyKey.xml&quot; -pri #匯入 MyKey 金鑰容器 aspnet_regiis -pi &quot;MyKey&quot; &quot;C:\MyKey.xml&quot; 新增/刪除存取權限在實作過程中，若遇到無法讀取 RSA 金鑰容器之類的錯誤訊息時，通常是目前帳戶對於此金鑰容器沒有讀取權限，此時可以透過 -pa 來授予讀取權限給指定使用者帳戶或群組 (預設是授予讀取權限，需要再加上 -full 才會是所有權限)，或是使用 -pr 來移除已授權存取的使用者帳戶或群組。在這邊需要特別提醒的是：除了實際的使用者帳戶或群組之外，還有 IIS 上的虛擬帳戶，例如文中提過的 MyWeb 應用程式集區，它所對應的虛擬帳戶則是 IIS AppPool\MyWeb。 #新增讀取權限 aspnet_regiis -pa &quot;MyKey&quot; &quot;IIS AppPool\MyWeb&quot; #刪除讀取權限 aspnet_regiis -pr &quot;MyKey&quot; 錯誤排除無法開啟組態設定檔由於系統預設是以 Machine-level 方式加密，我們必須使用 系統管理員 身份執行 cmd.exe 才能正常進行加密與解密動作，否則將會得到類似如下的錯誤訊息： 找不到加密提供者若要使用 -prov 指定加密提供者，必需先在 web.config 裡加上它的區段內容 (如 3.3 所提及)，否則在加密過程中，會發生找不到加密提供者的錯誤： 讀取權限不足經加密過的組態設定檔，在程式執行階段不需要再自行解密將原始本文取出，系統會自動以目前執行身份進行解密的動作，若無權限讀取當初加密的金鑰容器，則會發生錯誤如下圖： 要新增金鑰容器讀取權限，我們必需知道金鑰容器名稱、程式執行身份，才有辦法正確執行授權指令，加密後的內容都會在區段上註記 configProtectionProvider 屬性，同一份檔案裡通常也都找得到 &lt;configProtectedData&gt; 區段，如下圖： 在 IIS 裡若沒有特別指定，通常執行應用程式的使用者都是虛擬帳戶： IIS AppPool\應用程式集區名稱，另外也可以打開工作管理員，查看 w3wp.exe 使用者名稱，這些都是可以確認應用程式執行身份的方法，有了這些資訊後，就可以透過 3.7 的方式來新增金鑰容器的讀取權限。 小技巧後記(未完)]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>RSA</tag>
        <tag>encrypt</tag>
        <tag>decrypt</tag>
        <tag>connection string</tag>
        <tag>aspnet_regiis</tag>
        <tag>加密</tag>
        <tag>解密</tag>
        <tag>連線字串</tag>
      </tags>
  </entry>
</search>
